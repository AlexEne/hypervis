#version 450

#define EPSILON 0.000001
#define APPROX_ZERO(x) (abs(x) < EPSILON)
#define APPROX_EQ(a, b) (abs((a) - (b)) < EPSILON)
#define APPROX_VEC_EQ(a, b) (dot((a) - (b), (a) - (b)) < EPSILON)

layout (local_size_x = 1) in;

struct Vertex4 {
    vec4 position;
    vec4 color;
};

struct DrawIndirectCommand {
    uint vertex_count;
    uint instance_count;
    uint first_vertex;
    uint first_instance;
};

layout(set = 0, binding = 0) uniform CutPlane {
    vec4 normal;
    vec4 base_point;
    mat4 proj_matrix;
};

layout(set = 0, binding = 1) uniform RotationMatrix {
    mat4 rotation_matrix;
};

layout(set = 1, binding = 0) uniform SimplexCount {
    uint simplex_count;
};

layout(set = 1, binding = 1) buffer SrcVertices {
    Vertex4 src_vertices[];
};

layout(set = 1, binding = 2) buffer SrcIndices {
    uint src_indices[];
};

layout(set = 2, binding = 0) buffer DrawCommand {
    DrawIndirectCommand command;
};

layout(set = 2, binding = 1) buffer DstVertices {
    Vertex4 dst_vertices[];
};

const uvec2 edges[6] = {
    { 0, 1 },
    { 0, 2 },
    { 0, 3 },
    { 1, 2 },
    { 1, 3 },
    { 2, 3 },
};

const uint tetrahedron_indices[12] = {
    0, 1, 2,
    0, 1, 3,
    0, 2, 3,
    1, 2, 3,
};

bool cut_line_seg(vec4 start, vec4 end, vec4 normal, out vec4 intersection, out float t) {
    t = dot(base_point - start, normal) / dot(end - start, normal);
    if (0.0 <= t && t <= 1.0) {
        intersection = start + t * (end - start);
        return true;
    }
    return false;
}

vec4 project(vec4 x) {
    return vec4((proj_matrix * (x - base_point)).xyz, 1.0);
}

float saturate(float value) {
    return min(1.0, max(-1.0, value));
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index > simplex_count) {
        return;
    }

    Vertex4 vertices[4];
    for (uint i = 0; i < 4; i++) {
        Vertex4 source = src_vertices[src_indices[index * 4 + i]];
        vertices[i].position = rotation_matrix * source.position;
        vertices[i].color = source.color;
    }

    // check to see if the tetrahedron is exactly in the cut plane
    if (APPROX_EQ(dot(vertices[0].position, normal), dot(base_point, normal))
        && APPROX_ZERO(dot(vertices[1].position - vertices[0].position, normal))
        && APPROX_ZERO(dot(vertices[2].position - vertices[0].position, normal))
        && APPROX_ZERO(dot(vertices[3].position - vertices[0].position, normal))
    ) {

        // emit a tetrahedron
        uint dst_index = atomicAdd(command.vertex_count, 12);
        for (uint i = 0; i < 12; i++) {
            Vertex4 vertex = vertices[tetrahedron_indices[i]];
            dst_vertices[dst_index + i].position = project(vertex.position);
            dst_vertices[dst_index + i].color = vec4(1.0, 1.0, 1.0, 1.0);
        }
    }
    else {
        Vertex4 intersections[4];
        uint count = 0;

        for (uint i = 0; i < 6; i++) {
            vec4 intersection;
            float t = 0.;

            uvec2 edge = edges[i];
            Vertex4 start = vertices[edge.x];
            Vertex4 end = vertices[edge.y];
            vec4 a = start.position;
            vec4 b = end.position;

            if (count < 4 && cut_line_seg(a, b, normal, intersection, t)) {
                intersections[count].position = project(intersection);
                intersections[count].color = mix(start.color, end.color, t);
                count++;
            }
        }

        if (count < 3) {
            // do nothing
            return;
        }
        else if (count == 3)
        {
            // emit a triangle
            uint dst_index = atomicAdd(command.vertex_count, 3);
            dst_vertices[dst_index + 0] = intersections[0];
            dst_vertices[dst_index + 1] = intersections[1];
            dst_vertices[dst_index + 2] = intersections[2];
        }
        else {
            // emit a quadrilateral
            vec2 angles[4] = {
                { 0.0, 0.0 },
                { 1.0, 0.0 },
                { 2.0, 0.0 },
                { 3.0, 0.0 },
            };

            vec3 a = intersections[0].position.xyz;
            vec3 b = intersections[1].position.xyz;
            vec3 c = intersections[2].position.xyz;
            vec3 n = normalize(cross(b - a, c - a));

            vec3 quad_centroid = vec3(0.0);
            for (uint i = 0; i < 4; i++) {
                quad_centroid += intersections[i].position.xyz;
            }
            quad_centroid /= 4.0;

            vec3 first = normalize(a - quad_centroid);
            for (uint i = 1; i < 4; i++) {
                vec3 edge = normalize(
                    intersections[i].position.xyz - quad_centroid);
                float angle = acos(saturate(dot(first, edge)));
                if (dot(n, cross(first, edge)) < 0.0) {
                    angle *= -1.0;
                }
                angles[i].y = angle;
            }

            for (uint i = 1; i < 4; i++) {
                for (uint j = i; j > 0 && angles[j - 1].y > angles[j].y; j--) {
                    vec2 tmp = angles[j];
                    angles[j] = angles[j - 1];
                    angles[j - 1] = tmp;
                }
            }

            uint dst_index = atomicAdd(command.vertex_count, 6);
            dst_vertices[dst_index + 0] = intersections[uint(angles[0].x)];
            dst_vertices[dst_index + 1] = intersections[uint(angles[1].x)];
            dst_vertices[dst_index + 2] = intersections[uint(angles[2].x)];
            dst_vertices[dst_index + 3] = intersections[uint(angles[0].x)];
            dst_vertices[dst_index + 4] = intersections[uint(angles[2].x)];
            dst_vertices[dst_index + 5] = intersections[uint(angles[3].x)];
        }
    }
}
